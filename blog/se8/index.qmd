---
author: [Vital Joseph, Sabrina Rodriguez, Alish Chhetri]
title: 'Style Guides and Rules'
date: '2023-11-03'
date-format: long
categories: [post, professional development, software engineering]
description: <em>How do Guiding Leadership Strategies Scale and Sustain Engineering Teams?</em>
toc: true
page-layout: full
---

## Overview

This blog post discusses the [Style Guides and Rules](https://abseil.io/resources/swe-book/html/ch08.html) chapter in the 
[Software Engineering at Google](https://abseil.io/resources/swe-book) book! This articleâ€™s goal is to highlight the significance of rules and guidelines in coding 
practices within engineering organizations, and the importance of adapting to the rapidly evolving industry.

## Summary

The [Style Guides and Rules](https://abseil.io/resources/swe-book/html/ch08.html) chapter in the [Software Engineering at Google](https://abseil.io/resources/swe-book)
book delves into the significance of rules and guidelines in coding practices within engineering organizations, using Google's approach as a prime example. It 
emphasizes tailored style guides for various programming languages, adapting to language traits and evolving industry standards. The chapter showcases the adaptive 
nature of rules, allowing for periodic changes, such as Google's shift in Python naming conventions from CamelCase to snake_case, highlighting the need for 
adaptability in maintaining effective guidelines. A specific case study illustrates how rules adapt, such as the allowance of std::unique_ptr in C++11 after aligning 
with style guidance. With over two billion lines of code and thousands of daily submissions, Google emphasizes standardization for codebase sustainability. Their 
focus on local reasoning, readability, and consistency aims to ensure a clear understanding of code without extensive cross-referencing. While rules are enforced, 
guides serve as best practices, balancing readability with some trade-offs for engineers. Adaptability is crucial, considering evolving languages and functionalities. 
Automation through formatting linters and tests aids in maintaining consistency and adhering to guidelines. In essence, the chapter offers valuable insights into the 
dynamic nature of rules and guidance, crucial for sustaining an efficient codebase in an ever-evolving engineering landscape.

## Reflection

When reading the through the chapter we should reflect on the importance of polices when working on code and what will having a good set of rules and style guides do 
for our project devolpment teams. For one, they should help address the challenges of using features of the tools correctly, which can introduce bugs if not applied 
properly. We have a built in interactive feature for the command line interface that assists in writing correct arguments so that the tools run correctly. Rules 
should also enforce best practices, rules should be aimed to make source code more readable. We have automatic linters that will reformatt any code implemented to 
match the standard for the whole project. As software engineers, we all have a different style of writing code, so to make code more readable and understandable it is 
important to establish consistency within formatting and syntax. Said consistency will also help with better scalability and debugging. As software projects become 
larger and more complex, establishing a set of styleguids and rules becomes more important. These rules play a crucial role in keeping the code structured and easily 
maintainable. They act as a safeguard against the code becoming chaotic, which would make it challenging to make modifications to the software. Also when code follows 
a predictable pattern, it becomes easier to recognize and address problems or errors for debugging.

## Action Items

To put action items into practice for evaluating engineering productivity using the Goals/Signals/Metrics (GSM) framework, it's essential to follow a two-
step process, beginning with the assessment of the value of measurement. The first step involves the **"Initial Evaluation: Establishing the Worth of 
Measurement."** This entails initiating the process by clearly defining a specific question or objective for measurement. It requires a thorough 
deliberation on various aspects of the inquiry, including the anticipated outcome and the rationale behind it. Identifying the key decision-makers and
establishing a timeline for implementing actions is also crucial. The assessment of measurement's feasibility should be based on the responses to these 
considerations, accounting for factors such as budget constraints, impending changes,and the challenges associated with convincing decision-makers. The 
second step revolves around the "Selection of Relevant Metrics with Clear Goals and Signals." This process commences with the articulation of a high-level 
objective that refrains from referencing specific measurement methods. The identification of signals, which serve as valuable indicators of progress toward
the final objective, is another vital component. While these signals may not always be directly quantifiable, they play a significant role. Subsequently, 
metrics, which serve as proxies for the signals, are formulated. These metrics are designed to provide measurable data, even if they aren't flawless
measurements. The GSM framework is instrumental in averting the "streetlight effect" by ensuring that chosen metrics align with the objectives, rather than 
relying solely on readily available but possibly irrelevant metrics. In the context presented in the text, Google applies this framework to assess
engineering productivity, with a particular emphasis on clearly defined objectives,signals, and metrics, especially in enhancing areas such as programming
language readability. This framework can be implemented in various domains to facilitate data-driven decision-making and effective action implementation.


{{< include /_back-blog.qmd >}}
